name: Python Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+" # Semantic versioning pattern

permissions:
  contents: read
  packages: write

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Extract version from tag
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/remla25-team21/model-service:${{ env.VERSION }}
            ghcr.io/remla25-team21/model-service:latest
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  bump_version_on_main:
    name: Bump version on main to next pre-release
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: success()
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Get released version from trigger
        id: get_released_version
        run: echo "RELEASED_VERSION_TAG=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV

      - name: Fetch all tags
        run: git fetch --tags
      - name: Get current pre-release counter
        id: get_pre_release_counter
        run: |
          base_version="${{ env.RELEASED_VERSION_TAG }}"
          # List tags matching pre-release pattern and sort them.
          pre_tags=$(git tag --list "v${base_version}-pre.*" --sort=-v:refname)

          if [[ -z "$pre_tags" ]]; then
            counter=0
          else
            # Extract the last numeric counter from the highest tag
            last_tag=$(echo "$pre_tags" | head -n 1)
            echo "Last pre-release tag: $last_tag"

            # Extract counter after last dash, e.g. 1.2.3-pre.5 -> 5
            counter=$(echo "$last_tag" | grep -oE '[0-9]+$')
            counter=${counter:-0}
          fi

          next_counter=$((counter + 1))
          echo "Next counter: $next_counter"

          echo "PRE_RELEASE_COUNTER=$next_counter" >> $GITHUB_ENV

      - name: Calculate next pre-release version with counter
        id: calculate_next_version
        run: |
          current_version="${{ env.RELEASED_VERSION_TAG }}" 
          pre_counter="${{ env.PRE_RELEASE_COUNTER }}"
          IFS='.' read -r major minor patch <<< "$current_version"

          next_pre_release_version="${major}.${minor}.${patch}-pre.${pre_counter}"

          echo "Next pre-release version: $next_pre_release_version"
          echo "NEXT_VERSION=$next_pre_release_version" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      # Optionally create a tag instead of a version file
      - name: Create pre-release tag
        run: |
          git tag -a "v${{ env.NEXT_VERSION }}" -m "Start next development cycle"
          git push origin "v${{ env.NEXT_VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
